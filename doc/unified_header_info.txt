This file summarizes the MR image data header that will to be sent
from the scanner to either the MURFI or AFNI real-time analysis
software.

Notes on AFNI compatibility
(http://afni.nimh.nih.gov/pub/dist/doc/program_help/README.realtime.html):
- The only ACQUISITION_TYPE we seem to support is 3D. But this should
  be investigated.
- XYFOV can be obtained from math on pixelSpacing* and
  num{Pixel,Slices}*.
- XYZFIRST is just the position vector.
- XYMATRIX is just numPixels* and numSlices.
- DATUM is computable from datatype
- XYZAXES is computable from the direction of the normal vector

magic: char8_t[5]
Must be "ERTI". The header reading code should assert that this string
is always correct in the header.

headerVersion: int32_t
Version of this header.

scanType: char8_t[64]
String identifying the type of scan. Examples are "MPRAGE" and "EPI"

imageType: char8_t[16]
String specifying the type of image that is being sent. Valid values:
- 2Dz: A single volume one slice at a time
- 2Dzt: Multiple volumes, each one slice at a time
- 3D: A single volume all at once
- 3Dt: Multiple volumes, one full volume at a time

note: char8_t[256]
Text string. Suggested contents are the scanner make and model, pulse
sequence name, and version information about the software sending the
image data from the scanner.

datatype: char8_t[16]
String specifying the datatype of the associated image data. Valid
values are listed below. A "c_" prefix indicates complex data.
- char8_t
- c_char8_t
- uchar8_t
- c_uchar8_t
- int16_t
- c_int16_t
- uint16_t
- c_uint16_t
- int32_t
- c_int32_t
- uint32_t
- c_uint32_t
- float32_t
- c_float32_t
- float64_t
- c_float64_t

isLittleEndian: bool
True if the image data is in little endian byte order.

isMosaic: bool
True if the images are sent in a mosaiced format. This only applies in
the case of 3D or 3Dt imageTypes.

pixelSpacingReadMM: float64_t
pixelSpacingPhaseMM: float64_t
pixelSpacingSliceMM: float64_t
sliceGapMM: float64_t
Pixel spacing in the three orthogonal acquisition directions, and the
gap between slice excitations. Specified in millimeters.

numPixelsRead: int32_t
numPixelsPhase: int32_t
numSlices: int32_t
The number of pixels in the three orthogonal acquisition directions.

voxelToWorldMatrix: float32_t[4][4]
Transformation matrix that takes voxel indices to world
coordinates. The storage is row-major.

repetitionTimeMS: int32_t
Time of one volume acquisition in milliseconds.

repetitionDelayMS: int32_t
Time between acquisitions in milliseconds.

currentTR: int32_t
totalTR: int32_t
Current and total expected TRs.

isMotionCorrected: bool
True if this volume has been motion corrected.

mcTranslationXMM: float64_t
mcTranslationYMM: float64_t
mcTranslationZMM: float64_t
Translation that was applied by motion correction, in millimeters.

mcRotationXDeg: float64_t
mcRotationYDeg: float64_t
mcRotationZDeg: float64_t
Rotation that was applied by motion correction, in degrees.

mcOrder: char8_t[5]
String indicating the order in which the rotations and translation
were applied by the motion correction algorithm. Examples are "YXZT"
for rotation in Y, then X, then Z, then translation, or "TZYX" for
translation, then rotation in Z, then Y, then X.
